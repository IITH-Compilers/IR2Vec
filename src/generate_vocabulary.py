# ------------------------------------------------------------------------------
#
# Part of the IR2Vec Project, under the Apache License v2.0 with LLVM
# Exceptions. See the LICENSE file for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# ------------------------------------------------------------------------------

import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-o", "--output", type=str, help="Output file name")
args = parser.parse_args()

if args.output is None:
    print("Error: Output file path not provided.")
    exit(1)

output_file = args.output
vocab_file = "../vocabulary/seedEmbeddingVocab.txt"

# Define headers and opening/closing of map
header = """\
// Generated by IR2Vec. DO NOT EDIT!
// This file contains the learned vocabulary used by IR2Vec.
//
// clang-format off

#ifndef __VOCABULARY__
#define __VOCABULARY__

#include <map>
#include <string>
#include <vector>
#include <unordered_map>
#include "IR2Vec.h"

namespace IR2Vec {

class Vocabulary {
public:
    static const std::unordered_map<std::string, IR2Vec::Vector>& getVocabulary() {
        return vocabulary;
    }
private:
    static const std::unordered_map<std::string, IR2Vec::Vector> vocabulary;
};

"""

opening = "\nconst std::unordered_map<std::string, IR2Vec::Vector> Vocabulary::vocabulary = {\n"
closing = """\
};
} // namespace IR2Vec

#endif // __VOCABULARY__
"""

try:
    with open(output_file, "w") as fw:
        fw.write(header)
        with open(vocab_file, "r") as fr:
            # Write vector declarations to the output file
            for line in fr.readlines():
                key, val = line.strip().split(":")
                e = val.find("]")
                fw.write(f"const IR2Vec::Vector {key}_vector = {{  {val[1:e]} }};\n")

        fw.write(opening)
        with open(vocab_file, "r") as fr:
            # Write map entries to the output file
            for line in fr.readlines():
                key, _ = line.strip().split(":")
                fw.write(f'    {{ "{key}", {key}_vector }},\n')
        fw.write(closing)

    print(f"Generated {output_file}")

except FileNotFoundError:
    print(f"Error: Vocabulary file '{vocab_file}' not found.")
